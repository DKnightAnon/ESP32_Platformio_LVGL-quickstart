#include <Arduino.h>
#include <ezButton.h>  // the library to use for SW pin
#include <lvgl.h>
#include <Adafruit_GFX.h> // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library for ST7735
#include <SPI.h>
 
 //https://www.instructables.com/Value-Your-Project-Use-Graphic-Display/

// put function declarations here:
int myFunction(int, int);
void tftPrintTest();
void testdrawtext(char *text, uint16_t color);
void testfastlines(uint16_t color1, uint16_t color2);
void testlines(uint16_t color);
void testdrawrects(uint16_t color);
void testtriangles();
void mediabuttons();
void testroundrects();
void testfillrects(uint16_t color1, uint16_t color2);
void testfillcircles(uint8_t radius, uint16_t color);
void testdrawcircles(uint8_t radius, uint16_t color);

//Encoder
#define CLK_PIN 35
#define DT_PIN 32
#define SW_PIN 33

#define DIRECTION_CW  0   // clockwise direction
#define DIRECTION_CCW 1  // counter-clockwise direction

//Display - 1.8 inch TFT LCD module SPI
#define DISPLAY_HORZ_RES 160
#define DISPLAY_VERT_RES 128

// #define DISPLAY_LED 5
#define DISPLAY_SCK 27
#define DISPLAY_SDA 14
#define DISPLAY_A0 12
#define DISPLAY_RESET 0
#define DISPLAY_CS 13
#define TFT_RST 0


int counter = 0;
int direction = DIRECTION_CW;
int CLK_state;
int prev_CLK_state;

ezButton button(SW_PIN);  // create ezButton object that attach to pin 7;

Adafruit_ST7735 display = Adafruit_ST7735(DISPLAY_CS, DISPLAY_A0, DISPLAY_SDA, DISPLAY_SCK, TFT_RST);

float p = 3.1415926;

void setup() {
  // put your setup code here, to run once:
  int result = myFunction(2, 3);
  Serial.begin(115200);

   // configure encoder pins as inputs
  pinMode(CLK_PIN, INPUT);
  pinMode(DT_PIN, INPUT);
  button.setDebounceTime(50);  // set debounce time to 50 milliseconds

  // read the initial state of the rotary encoder's CLK pin
  prev_CLK_state = digitalRead(CLK_PIN);




  Serial.print(F("Hello! ST77xx TFT Test"));
  display.initR(INITR_BLACKTAB);
  Serial.println(F("Initialized"));

  uint16_t time = millis();
  display.fillScreen(ST77XX_BLACK);
  time = millis() - time;

  Serial.println(time, DEC);
  delay(500);

  // large block of text
  display.fillScreen(ST77XX_BLACK);
  testdrawtext("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla sed malesuada et, malesuada sit amet turpis. Sed porttitor neque ut ante pretium vitae malesuada nunc bibendum. Nullam aliquet ultrices massa eu hendrerit. Ut sed nisi lorem. In vestibulum purus a tortor imperdiet posuere. ", ST77XX_WHITE);
  delay(1000);

  // tft print function!
  tftPrintTest();
  delay(4000);

  // a single pixel
  display.drawPixel(display.width()/2, display.height()/2, ST77XX_GREEN);
  delay(500);

  // line draw test
  testlines(ST77XX_YELLOW);
  delay(500);

  // optimized lines
  testfastlines(ST77XX_RED, ST77XX_BLUE);
  delay(500);

  testdrawrects(ST77XX_GREEN);
  delay(500);

  testfillrects(ST77XX_YELLOW, ST77XX_MAGENTA);
  delay(500);

  display.fillScreen(ST77XX_BLACK);
  testfillcircles(10, ST77XX_BLUE);
  testdrawcircles(10, ST77XX_WHITE);
  delay(500);

  testroundrects();
  delay(500);

  testtriangles();
  delay(500);

  mediabuttons();
  delay(500);

  Serial.println("done");
  delay(1000);

}

void loop() {
  // put your main code here, to run repeatedly:
  button.loop();  // MUST call the loop() function first

  // read the current state of the rotary encoder's CLK pin
  CLK_state = digitalRead(CLK_PIN);

  // If the state of CLK is changed, then pulse occurred
  // React to only the rising edge (from LOW to HIGH) to avoid double count
  if (CLK_state != prev_CLK_state && CLK_state == HIGH) {
    // if the DT state is HIGH
    // the encoder is rotating in counter-clockwise direction => decrease the counter
    if (digitalRead(DT_PIN) == HIGH) {
      counter--;
      direction = DIRECTION_CCW;
    } else {
      // the encoder is rotating in clockwise direction => increase the counter
      counter++;
      direction = DIRECTION_CW;
    }

    Serial.print("Rotary Encoder:: direction: ");
    if (direction == DIRECTION_CW)
      Serial.print("Clockwise");
    else
      Serial.print("Counter-clockwise");

    Serial.print(" - count: ");
    Serial.println(counter);
  }

  // save last CLK state
  prev_CLK_state = CLK_state;

  if (button.isPressed()) {
    Serial.println("The button is pressed");
  }

  display.invertDisplay(true);
  delay(500);
  display.invertDisplay(false);
  delay(500);


}

// put function definitions here:
int myFunction(int x, int y) {
  return x + y;
}

void testlines(uint16_t color) {
  display.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < display.width(); x+=6) {
    display.drawLine(0, 0, x, display.height()-1, color);
    delay(0);
  }
  for (int16_t y=0; y < display.height(); y+=6) {
    display.drawLine(0, 0, display.width()-1, y, color);
    delay(0);
  }

  display.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < display.width(); x+=6) {
    display.drawLine(display.width()-1, 0, x, display.height()-1, color);
    delay(0);
  }
  for (int16_t y=0; y < display.height(); y+=6) {
    display.drawLine(display.width()-1, 0, 0, y, color);
    delay(0);
  }

  display.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < display.width(); x+=6) {
    display.drawLine(0, display.height()-1, x, 0, color);
    delay(0);
  }
  for (int16_t y=0; y < display.height(); y+=6) {
    display.drawLine(0, display.height()-1, display.width()-1, y, color);
    delay(0);
  }

  display.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < display.width(); x+=6) {
    display.drawLine(display.width()-1, display.height()-1, x, 0, color);
    delay(0);
  }
  for (int16_t y=0; y < display.height(); y+=6) {
    display.drawLine(display.width()-1, display.height()-1, 0, y, color);
    delay(0);
  }
}

void testdrawtext(char *text, uint16_t color) {
  display.setCursor(0, 0);
  display.setTextColor(color);
  display.setTextWrap(true);
  display.print(text);
}

void testfastlines(uint16_t color1, uint16_t color2) {
  display.fillScreen(ST77XX_BLACK);
  for (int16_t y=0; y < display.height(); y+=5) {
    display.drawFastHLine(0, y, display.width(), color1);
  }
  for (int16_t x=0; x < display.width(); x+=5) {
    display.drawFastVLine(x, 0, display.height(), color2);
  }
}

void testdrawrects(uint16_t color) {
  display.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < display.width(); x+=6) {
    display.drawRect(display.width()/2 -x/2, display.height()/2 -x/2 , x, x, color);
  }
}

void testfillrects(uint16_t color1, uint16_t color2) {
  display.fillScreen(ST77XX_BLACK);
  for (int16_t x=display.width()-1; x > 6; x-=6) {
    display.fillRect(display.width()/2 -x/2, display.height()/2 -x/2 , x, x, color1);
    display.drawRect(display.width()/2 -x/2, display.height()/2 -x/2 , x, x, color2);
  }
}

void testfillcircles(uint8_t radius, uint16_t color) {
  for (int16_t x=radius; x < display.width(); x+=radius*2) {
    for (int16_t y=radius; y < display.height(); y+=radius*2) {
      display.fillCircle(x, y, radius, color);
    }
  }
}

void testdrawcircles(uint8_t radius, uint16_t color) {
  for (int16_t x=0; x < display.width()+radius; x+=radius*2) {
    for (int16_t y=0; y < display.height()+radius; y+=radius*2) {
      display.drawCircle(x, y, radius, color);
    }
  }
}

void testtriangles() {
  display.fillScreen(ST77XX_BLACK);
  uint16_t color = 0xF800;
  int t;
  int w = display.width()/2;
  int x = display.height()-1;
  int y = 0;
  int z = display.width();
  for(t = 0 ; t <= 15; t++) {
    display.drawTriangle(w, y, y, x, z, x, color);
    x-=4;
    y+=4;
    z-=4;
    color+=100;
  }
}

void testroundrects() {
  display.fillScreen(ST77XX_BLACK);
  uint16_t color = 100;
  int i;
  int t;
  for(t = 0 ; t <= 4; t+=1) {
    int x = 0;
    int y = 0;
    int w = display.width()-2;
    int h = display.height()-2;
    for(i = 0 ; i <= 16; i+=1) {
      display.drawRoundRect(x, y, w, h, 5, color);
      x+=2;
      y+=3;
      w-=4;
      h-=6;
      color+=1100;
    }
    color+=100;
  }
}

void tftPrintTest() {
  display.setTextWrap(false);
  display.fillScreen(ST77XX_BLACK);
  display.setCursor(0, 30);
  display.setTextColor(ST77XX_RED);
  display.setTextSize(1);
  display.println("Hello World!");
  display.setTextColor(ST77XX_YELLOW);
  display.setTextSize(2);
  display.println("Hello World!");
  display.setTextColor(ST77XX_GREEN);
  display.setTextSize(3);
  display.println("Hello World!");
  display.setTextColor(ST77XX_BLUE);
  display.setTextSize(4);
  display.print(1234.567);
  delay(1500);
  display.setCursor(0, 0);
  display.fillScreen(ST77XX_BLACK);
  display.setTextColor(ST77XX_WHITE);
  display.setTextSize(0);
  display.println("Hello World!");
  display.setTextSize(1);
  display.setTextColor(ST77XX_GREEN);
  display.print(p, 6);
  display.println(" Want pi?");
  display.println(" ");
  display.print(8675309, HEX); // print 8,675,309 out in HEX!
  display.println(" Print HEX!");
  display.println(" ");
  display.setTextColor(ST77XX_WHITE);
  display.println("Sketch has been");
  display.println("running for: ");
  display.setTextColor(ST77XX_MAGENTA);
  display.print(millis() / 1000);
  display.setTextColor(ST77XX_WHITE);
  display.print(" seconds.");
}

void mediabuttons() {
  // play
  display.fillScreen(ST77XX_BLACK);
  display.fillRoundRect(25, 10, 78, 60, 8, ST77XX_WHITE);
  display.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_RED);
  delay(500);
  // pause
  display.fillRoundRect(25, 90, 78, 60, 8, ST77XX_WHITE);
  display.fillRoundRect(39, 98, 20, 45, 5, ST77XX_GREEN);
  display.fillRoundRect(69, 98, 20, 45, 5, ST77XX_GREEN);
  delay(500);
  // play color
  display.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_BLUE);
  delay(50);
  // pause color
  display.fillRoundRect(39, 98, 20, 45, 5, ST77XX_RED);
  display.fillRoundRect(69, 98, 20, 45, 5, ST77XX_RED);
  // play color
  display.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_GREEN);
}